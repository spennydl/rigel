#include "phys.h"
#include <iostream>

namespace rigel {
namespace phys {

// TODO: Should think about decomposing this a little more.
// I'm a little hesitant to make a PhysicsObject type
// but that may be the way to go?

void handle_entity_collision(entity::Entity* entity, glm::vec3 axis, f32 depth)
{
    entity->position += (axis * depth);

    // only zero tangent velocity if the entity is actually trying
    // to move into the shape.
    // This is necessary because we're not doing continuous collision
    // detection, so entities can sometimes clip corners and stop dead.
    glm::vec3 surf_norm = glm::normalize(axis);
    //if (vdp < 0.0) {
        glm::vec3 tangent_vec(-surf_norm.y, surf_norm.x, 0);
        entity->velocity =
          glm::dot(entity->velocity, tangent_vec) * tangent_vec;

        // normal force
        glm::vec3 vforce(0, entity->forces.y, 0);
        glm::vec3 norm_force = -glm::dot(surf_norm, vforce) * surf_norm;
        //std::cout << "norm " << norm_force.x << "," << norm_force.y << std::endl;

        entity->forces += norm_force;
//        if ((entity->state_flags & entity::STATE_ON_LAND)) {
//            //std::cout << norm_force_mag << std::endl;
//            f32 norm_face = signof(surf_norm.x);
//            glm::vec3 friction((-norm_face)*surf_norm.y, (norm_face)*surf_norm.x, 0);
//            f32 norm_mag = glm::length(norm_force);
//            // friction
//            //f32 friction_dir = -signof(entity->velocity.x);
//            // TODO: this should be perp to the normal which means
//            // it's not gonna work on slopes right now
//            f32 coeff_of_friction = 0.1;
//            auto fric_force = coeff_of_friction * norm_mag * friction;
//            //std::cout << "fric " << fric_force.x << "," << fric_force.y << std::endl;
//            //entity->forces += fric_force;
//            //entity->forces += coeff_of_friction * norm_force_mag * friction;
//        }
    //} else {
        //std::cout << "pen: " << axis.x << "," << axis.y << std::endl;
    //}

    // if we collide below then change to ground state
    if (axis.y > 0) {
        entity->state_flags =
          entity->state_flags &
          (~(entity::STATE_JUMPING | entity::STATE_FALLING));
        entity->state_flags |= entity::STATE_ON_LAND;
    }

}

void
resolve_stage_collisions(WorldChunk* world_chunk,
                         ColliderSet* stage_colliders,
                         mem::Arena* scratch_arena)
{
    for (usize e = 0; e < world_chunk->next_free_entity_idx; e++) {
        auto entity = world_chunk->entities + e;
        auto entity_colliders = entity->colliders;
        for (usize ec = 0; ec < entity_colliders->n_aabbs; ec++) {
            auto collider = entity_colliders->aabbs[ec];
            collider.center.x = entity->position.x + collider.extents.x;
            collider.center.y = entity->position.y + collider.extents.y;

            for (usize sc = 0; sc < stage_colliders->n_aabbs; sc++) {
                // TODO: scratch arena too small
                scratch_arena->reinit();
                auto stage_collider = stage_colliders->aabbs + sc;
                // TODO: we do not need the entity velocities
                CollisionResult collision_result =
                  sat_collision_check(scratch_arena,
                                      &collider,
                                      stage_collider,
                                      entity->velocity,
                                      glm::vec3(0, 0, 0));

                if (collision_result.depth >= 0) {
                    // TODO: This is aabb specific. Dunno why I hafta do it?
                    // Need to look into it.
                    if (stage_collider->center.x > collider.center.x) {
                        collision_result.penetration_axis.x *= -1;
                    }
                    if (stage_collider->center.y > collider.center.y) {
                        collision_result.penetration_axis.y *= -1;
                    }
                    handle_entity_collision(entity, collision_result.penetration_axis, collision_result.depth);
                    stage_collider->is_colliding = true;
                } else {
                    stage_collider->is_colliding = false;
                }
            }

            collider.center.x = entity->position.x + collider.extents.x;
            collider.center.y = entity->position.y + collider.extents.y;

              for (int t = 0; t < stage_colliders->n_tris; t++) {
                 scratch_arena->reinit();

                 auto stage_collider = stage_colliders->tris + t;
                
                 CollisionResult collision_result =
                    sat_collision_check(scratch_arena, 
                                        &collider,
                                        stage_collider,
                                        entity->velocity,
                                        glm::vec3(0, 0, 0));


                 if (collision_result.depth >= 0) {
                    // TODO: I need continuous collision detection.
                    handle_entity_collision(entity, collision_result.penetration_axis, collision_result.depth);
                }
            }
        }
    }
}

// first we run brains
// then we integrate positions
// then we run collision make adjustments as necessary

void
integrate_entity_positions(WorldChunk* world_chunk, f32 dt, mem::Arena* scratch_arena)
{
    f32 dtdt = dt * dt;
    glm::vec3 gravity_vec(0, rigel::GRAVITY, 0);

    auto stage_colliders = &world_chunk->active_stage->colliders;

    for (usize e = 0; e < world_chunk->next_free_entity_idx; e++) {
        auto entity = world_chunk->entities + e;
        //entity->forces += gravity_vec;

        glm::vec3 new_pos = entity->position + (entity->velocity * dt) +
                            (0.5f * entity->acceleration * dtdt);

        auto position_err = entity->position_err;
        position_err += glm::fract(new_pos);
        new_pos = glm::floor(new_pos);

        while (position_err.x >= 1.0f) {
            new_pos.x += 1;
            position_err.x -= 1;
        }
        while (position_err.y >= 1.0f) {
            new_pos.y += 1;
            position_err.y -= 1;
        }
        entity->position = new_pos;
        entity->position_err = position_err;

//        resolve_stage_collisions(world_chunk,
                                 //&world_chunk->active_stage->colliders,
                                 //scratch_arena);

        glm::vec3 new_accel = entity->forces;
        //std::cout << "force " << new_accel.x << "," << new_accel.y << std::endl;

        // TODO: we need to do collision here instead.
        //
        // Check the new position against the level. For each collision:
        // - zero out the normal component to the collision (as we do)
        // - get the normal force from the collision and use it to
        //   calculate friction

        glm::vec3 new_velocity =
          entity->velocity + (entity->acceleration + new_accel) * (0.5f * dt);

        if (new_velocity.x > MAX_XSPEED) {
            new_velocity.x = MAX_XSPEED;
        }
        if (new_velocity.x < -MAX_XSPEED) {
            new_velocity.x = -MAX_XSPEED;
        }


        entity->velocity = new_velocity;
        //std::cout << "vel " << entity->velocity.x << "," << entity->velocity.y << std::endl;
        entity->acceleration = new_accel;
    }
}

}
}
